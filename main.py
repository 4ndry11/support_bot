import re
import os
import json
import requests
import gspread
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext
from google.oauth2.service_account import Credentials


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ["BOT_TOKEN"]

# –í–µ–±—Ö—É–∫–∏ Bitrix24
BITRIX_CONTACT_URL = os.environ["BITRIX_CONTACT_URL"]
BITRIX_TASK_URL = os.environ["BITRIX_TASK_URL"]

# Google Sheets
SPREADSHEET_NAME = os.environ["SPREADSHEET_NAME"]

RESPONSIBLE_ID = 596


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    "CL1": "–î–∑–≤—ñ–Ω–∫–∏ –¥—Ä—ñ–±–Ω—ñ",
    "CL2": "–î–∑–≤—ñ–Ω–∫–∏ —Å–µ—Ä–µ–¥–Ω—ñ",
    "CL3": "–î–∑–≤—ñ–Ω–∫–∏ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ",
    "SMS": "–°–ú–°",
    "SEC": "–°–ë (—Å—É–ø—Ä–æ–≤—ñ–¥)",
    "CNF": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è",
    "NEW": "–ü–µ—Ä—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç",
    "HS1": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ª–µ–≥–∫–µ",
    "HS2": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–µ—Ä–µ–¥–Ω—î",
    "HS3": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–ª–∞–¥–Ω–µ",
    "REP": "–ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
}

# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ø–æ Telegram ID)
EMPLOYEES = {
    727013047: {"name": "–Ü–≤–∞–Ω–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π", "b24_id": 596},
    5690994847: {"name": "–ó–∞–∏—Ü –í–∞–ª–µ—Ä–∏—è", "b24_id": 2289},
    6555660815: {"name": "–ù—ñ–∫–æ–Ω–æ–≤–∞ –¢–µ—Ç—è–Ω–∞", "b24_id": 594},
    1062635787: {"name": "–ì—Ä—É—à–µ–≤–∞ –¢–µ—Ç—è–Ω–∞", "b24_id": 592},
    878632178: {"name": "–°—Ç–∞–Ω—ñ—Å–ª–∞–≤–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è", "b24_id": 632},
    887279899: {"name": "–õ–∞–±—ñ–∫ –ì–µ–Ω–Ω–∞–¥—ñ–π", "b24_id": 631},
    724515180: {"name": "–ì–∞–π—Å—ñ–Ω–∞ –ì–∞–Ω–Ω–∞", "b24_id": 1104},
    531712678: {"name": "–ü–µ—Ç—Ä–∏—á –°—Ç–µ–ª–ª–∞", "b24_id": 1106}
}


# === Google Sheets Init ===
def init_gsheets():
    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    json_creds = os.environ["GSHEETS_CREDENTIALS_JSON"]
    creds_dict = json.loads(json_creds)
    creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open(os.environ["SPREADSHEET_NAME"]).sheet1
    return sheet


# === –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def parse_message(text: str):
    match = re.match(r"^(CL1|CL2|CL3|SMS|SEC|CNF|NEW|REP)\s+(\+?[0-9]+)\s*\|\s*(.+)$", text.strip(), re.IGNORECASE)
    if not match:
        return None
    code, phone, comment = match.groups()

    if phone.startswith("0"):
        phone = "+38" + phone
    elif phone.startswith("380"):
        phone = "+" + phone
    elif not phone.startswith("+380"):
        phone = "+380" + phone.lstrip("380")

    return code.upper(), phone, comment.strip()


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ===
def clean_phone(p: str) -> str:
    return re.sub(r"\D", "", p)  # —É–±–∏—Ä–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä

def normalize_phone(phone: str) -> str:
    digits = clean_phone(phone)
    if digits.startswith("0"):
        digits = "38" + digits
    if not digits.startswith("380"):
        digits = "380" + digits.lstrip("380")
    return "+{}".format(digits)  # ‚Üê —Ç–µ–ø–µ—Ä –∑ –ø–ª—é—Å–æ–º


# === Bitrix: –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
def normalize_phone(phone: str) -> str:
    digits = clean_phone(phone)
    if digits.startswith("0"):
        digits = "38" + digits
    if not digits.startswith("380"):
        digits = "380" + digits.lstrip("380")
    return "+{}".format(digits)  # ‚Üê —Ç–µ–ø–µ—Ä –∑ –ø–ª—é—Å–æ–º

# === Bitrix: –ø–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑ –ø–æ–≤–Ω–æ—é –ø–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ—é –∑–∞–≥—Ä—É–∑–∫–æ—é ===
def find_contact_by_phone(phone):
    norm_phone_full = normalize_phone(phone)  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: +380631234567
    print(f"üîç –®—É–∫–∞—î–º–æ –ø–æ API —Ñ—ñ–ª—å—Ç—Ä–æ–º: {norm_phone_full}")

    try:
        r = requests.get(
            BITRIX_CONTACT_URL,
            params={
                "filter[PHONE]": norm_phone_full,
                "select[]": ["ID", "NAME", "LAST_NAME", "PHONE"]
            }
        )
        r.raise_for_status()
        data = r.json()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Bitrix24: {e}")
        return None

    result = data.get("result", [])
    if not result:
        print("‚ùå –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return None

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
    for c in result:
        for ph in c.get("PHONE", []):
            if clean_phone(ph["VALUE"]) == clean_phone(norm_phone_full):
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {c.get('NAME')} {c.get('LAST_NAME')}")
                return c

    print("‚ùå –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–∞–≤—ñ—Ç—å —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
    return None



# === Bitrix: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===
def create_task(contact_id, category, comment, responsible_id):
    now = datetime.now()
    deadline = now + timedelta(days=1)
    deadline_str = deadline.strftime("%Y-%m-%dT%H:%M:%S+03:00")

    # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    payload = {
        "fields": {
            "TITLE": f"–ó–∞–ø–∏—Å: {category}",
            "DESCRIPTION": comment,
            "RESPONSIBLE_ID": responsible_id,
            "DEADLINE": deadline_str,
            "UF_CRM_TASK": [f"C_{contact_id}"],
        },
        "notify": True
    }

    task_res = requests.post(BITRIX_TASK_URL, json=payload)
    if task_res.status_code != 200:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ: {task_res.text}")
        return

    task_data = task_res.json()
    task_id = task_data.get("result")
    if not task_id:
        print("‚ùå Bitrix24 –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ ID –∑–∞–¥–∞—á—ñ")
        return

    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: ID={task_id}")

    # 2. –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç–∞–π–º–ª–∞–π–Ω—É –∫–ª—ñ—î–Ω—Ç–∞
    comment_url = BITRIX_CONTACT_URL.replace("crm.contact.list", "crm.timeline.comment.add")
    timeline_payload = {
        "fields": {
            "ENTITY_ID": contact_id,
            "ENTITY_TYPE": "contact",
            "COMMENT": f"üìå {category}: {comment}",
            "AUTHOR_ID": responsible_id  # ‚Üê —Ü–µ —ñ —î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫, –≤—ñ–¥ —ñ–º–µ–Ω—ñ —è–∫–æ–≥–æ –ø–∏—à–µ—Ç—å—Å—è
        }
    }

    comment_res = requests.post(comment_url, json=timeline_payload)
    if comment_res.status_code == 200:
        print("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–∞–π–º–ª–∞–π–Ω—É")
    else:
        print(f"‚ö†Ô∏è –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –¥–æ–¥–∞–Ω–æ: {comment_res.text}")

    # 3. –ó–∞–≤–µ—Ä—à—É—î–º–æ –∑–∞–¥–∞—á—É
    complete_url = BITRIX_TASK_URL.replace("task.item.add", "task.complete")
    complete_payload = {"id": task_id}
    complete_res = requests.post(complete_url, json=complete_payload)

    if complete_res.status_code == 200:
        print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä–∏—Ç–∞ –æ–¥—Ä–∞–∑—É (API –ø–æ–≤–µ—Ä–Ω—É–≤ 200)")
    else:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–¥–∞—á—É: {complete_res.text}")




# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def handle_message(update: Update, context: CallbackContext):
    parsed = parse_message(update.message.text)
    if not parsed:
        return

    code, phone, comment = parsed
    category = CATEGORIES.get(code, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
    employee_data = EMPLOYEES.get(update.message.from_user.id)
    if employee_data:
        employee_name = employee_data["name"]
        responsible_id = employee_data["b24_id"]
    else:
        employee_name = update.message.from_user.full_name
        responsible_id = RESPONSIBLE_ID  # –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π

    # –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞
    contact = find_contact_by_phone(phone)
    if not contact:
        update.message.reply_text("‚ùó –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É CRM")
        return

    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ (–≤—ñ–¥ —ñ–º–µ–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    create_task(contact["ID"], category, comment, responsible_id)

    # –∑–∞–ø–∏—Å —É Google Sheets
    try:
        sheet = init_gsheets()
        sheet.append_row([timestamp, employee_name, category, phone, comment, "–í–∏–∫–æ–Ω–∞–Ω–æ"])
    except Exception as e:
        update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞ Google Sheets: {e}")
        return

    client_name = f"{contact.get('NAME', '')} {contact.get('LAST_NAME', '')}".strip()
    update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {category} ‚Äì {client_name}")



# === MAIN ===
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
