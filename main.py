import re
import os
import json
import requests
import gspread
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler
from google.oauth2.service_account import Credentials
from collections import Counter

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ["BOT_TOKEN"]

# –í–µ–±—Ö—É–∫–∏ Bitrix24
BITRIX_CONTACT_URL = os.environ["BITRIX_CONTACT_URL"]  # crm.contact.list
BITRIX_TASK_URL = os.environ["BITRIX_TASK_URL"]        # task.item.add

# Google Sheets
SPREADSHEET_NAME = os.environ["SPREADSHEET_NAME"]

RESPONSIBLE_ID = 596

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    "CL1": "–î–∑–≤—ñ–Ω–∫–∏ –¥—Ä—ñ–±–Ω—ñ",
    "CL2": "–î–∑–≤—ñ–Ω–∫–∏ —Å–µ—Ä–µ–¥–Ω—ñ",
    "CL3": "–î–∑–≤—ñ–Ω–∫–∏ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ",
    "SMS": "–°–ú–°",
    "SEC": "–°–ë (—Å—É–ø—Ä–æ–≤—ñ–¥)",
    "CNF": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è",
    "NEW": "–ü–µ—Ä—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç",
    "HS1": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ª–µ–≥–∫–µ",
    "HS2": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–µ—Ä–µ–¥–Ω—î",
    "HS3": "–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∫–ª–∞–¥–Ω–µ",
    "REP": "–ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
}

# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ø–æ Telegram ID)
EMPLOYEES = {
    727013047: {"name": "–Ü–≤–∞–Ω–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π", "b24_id": 596},
    5690994847: {"name": "–ó–∞–∏—Ü –í–∞–ª–µ—Ä–∏—è", "b24_id": 2289},
    6555660815: {"name": "–ù—ñ–∫–æ–Ω–æ–≤–∞ –¢–µ—Ç—è–Ω–∞", "b24_id": 594},
    1062635787: {"name": "–ì—Ä—É—à–µ–≤–∞ –¢–µ—Ç—è–Ω–∞", "b24_id": 592},
    878632178: {"name": "–°—Ç–∞–Ω—ñ—Å–ª–∞–≤–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è", "b24_id": 632},
    887279899: {"name": "–õ–∞–±—ñ–∫ –ì–µ–Ω–Ω–∞–¥—ñ–π", "b24_id": 631},
    724515180: {"name": "–ì–∞–π—Å—ñ–Ω–∞ –ì–∞–Ω–Ω–∞", "b24_id": 1104},
    531712678: {"name": "–ü–µ—Ç—Ä–∏—á –°—Ç–µ–ª–ª–∞", "b24_id": 1106},
    8183276948:{"name": "–®–≤–µ—Ü—å –ú–∞–∫—Å–∏–º", "b24_id": 2627}
}

# === Google Sheets Init ===
def init_gsheets():
    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds_path = "/etc/secrets/gsheets.json"  # Render default path
    creds = Credentials.from_service_account_file(creds_path, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open(os.environ["SPREADSHEET_NAME"]).sheet1
    return sheet

# === –¢–µ–ª–µ—Ñ–æ–Ω—ã ===
def clean_phone(p: str) -> str:
    return re.sub(r"\D", "", p)

def normalize_phone(phone: str) -> str:
    digits = clean_phone(phone)
    if digits.startswith("0"):
        digits = "38" + digits
    if not digits.startswith("380"):
        digits = "380" + digits.lstrip("380")
    return "+" + digits

# === –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ) ===
def parse_message(text: str):
    match = re.match(
        r"^(CL1|CL2|CL3|SMS|SEC|CNF|NEW|REP|HS1|HS2|HS3)\s+(\+?[0-9]+)\s*\|\s*(.+)",
        text.strip(),
        re.IGNORECASE | re.S
    )
    if not match:
        return None
    code, phone, comment = match.groups()
    phone = normalize_phone(phone)
    return code.upper(), phone, comment.strip()

# === Bitrix: –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ===
def find_contact_by_phone(phone):
    norm_phone_full = normalize_phone(phone)  # –Ω–∞–ø—Ä.: +380631234567
    try:
        r = requests.get(
            BITRIX_CONTACT_URL,
            params={
                "filter[PHONE]": norm_phone_full,
                "select[]": ["ID", "NAME", "LAST_NAME", "PHONE"]
            }
        )
        r.raise_for_status()
        data = r.json()
    except Exception as e:
        print(f"‚ùå Bitrix24 error: {e}")
        return None

    result = data.get("result", [])
    if not result:
        return None

    for c in result:
        for ph in c.get("PHONE", []):
            if clean_phone(ph.get("VALUE", "")) == clean_phone(norm_phone_full):
                return c
    return None

# === Bitrix: —Å–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è —Ä–∞–±–æ—á–∏—Ö –∑–∞–ø–∏—Å–µ–π) ===
def create_task(contact_id, category, comment, responsible_id):
    now = datetime.now()
    deadline = now + timedelta(days=1)
    deadline_str = deadline.strftime("%Y-%m-%dT%H:%M:%S+03:00")

    payload = {
        "fields": {
            "TITLE": f"–ó–∞–ø–∏—Å: {category}",
            "DESCRIPTION": comment,
            "RESPONSIBLE_ID": responsible_id,
            "DEADLINE": deadline_str,
            "UF_CRM_TASK": [f"C_{contact_id}"],
        },
        "notify": True
    }

    task_res = requests.post(BITRIX_TASK_URL, json=payload)
    if task_res.status_code != 200:
        print(f"‚ùå create_task: {task_res.text}")
        return

    task_id = task_res.json().get("result")
    if not task_id:
        print("‚ùå create_task: no task id")
        return

    # —Ç–∞–π–º–ª–∞–π–Ω
    comment_url = BITRIX_CONTACT_URL.replace("crm.contact.list", "crm.timeline.comment.add")
    timeline_payload = {
        "fields": {
            "ENTITY_ID": contact_id,
            "ENTITY_TYPE": "contact",
            "COMMENT": f"üìå {category}: {comment}",
            "AUTHOR_ID": responsible_id
        }
    }
    requests.post(comment_url, json=timeline_payload)

    # –∑–∞–≤–µ—Ä—à–∏—Ç—å
    complete_url = BITRIX_TASK_URL.replace("task.item.add", "task.complete")
    requests.post(complete_url, json={"id": task_id})

# === –£—Ç–∏–ª–∏—Ç—ã ===
def safe_str(x):
    return "" if x is None else str(x)

# === –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏–∑ Google Sheets –¥–ª—è /info (–±–µ–∑ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏) ===
def aggregate_client_info_from_sheet(phone: str, days: int):
    sheet = init_gsheets()
    values = sheet.get_all_values()  # –æ–∂–∏–¥–∞–µ–º: [timestamp, employee, category(code), phone, comment, status]

    phone_norm = normalize_phone(phone)
    since_dt = datetime.now() - timedelta(days=days)

    rows = []
    for row in values:
        if len(row) < 4:
            continue

        ts_raw = safe_str(row[0]).strip()
        employee = safe_str(row[1]).strip()
        category = safe_str(row[2]).strip().upper()
        phone_row = normalize_phone(safe_str(row[3]).strip())
        comment = safe_str(row[4]).strip() if len(row) > 4 else ""

        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if ts_raw.lower() in ("timestamp", "–¥–∞—Ç–∞", "time"):
            continue

        # –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
        ts = None
        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d %H:%M", "%Y-%m-%d"):
            try:
                ts = datetime.strptime(ts_raw, fmt)
                break
            except Exception:
                continue
        if ts is None:
            try:
                ts = datetime.fromisoformat(ts_raw)
            except Exception:
                continue

        if ts < since_dt or phone_row != phone_norm:
            continue

        rows.append({
            "ts": ts,
            "employee": employee,
            "category": category,
            "comment": comment
        })

    total = len(rows)
    by_emp = Counter(r["employee"] for r in rows if r["employee"])
    by_cat = Counter(r["category"] for r in rows if r["category"])

    latest = sorted(rows, key=lambda x: x["ts"], reverse=True)[:5]

    return {
        "total": total,
        "by_emp": by_emp,
        "by_cat": by_cat,
        "latest": latest,
        "since": since_dt
    }

# === –ö–æ–º–∞–Ω–¥–∞ /info +380..., N ===
def handle_info_command(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    m = re.match(r"^/info\s+([+\d()\-\s]+)\s*,\s*(\d+)$", text, re.IGNORECASE)
    if not m:
        update.message.reply_text("–§–æ—Ä–º–∞—Ç: /info +380XXXXXXXXX, N\n–ù–∞–ø—Ä.: /info +380631234567, 7")
        return

    phone_raw, days_str = m.groups()
    phone = normalize_phone(phone_raw)
    days = int(days_str)

    # –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ CRM
    contact = find_contact_by_phone(phone)
    client_name = None
    if contact:
        client_name = f"{contact.get('NAME', '')} {contact.get('LAST_NAME', '')}".strip()
        if not client_name:
            client_name = None

    data = aggregate_client_info_from_sheet(phone, days)

    header_name = client_name if client_name else "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É CRM"
    header = (
        f"‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –∫–ª—ñ—î–Ω—Ç—É: {header_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω. (–∑ {data['since'].strftime('%Y-%m-%d')})"
    )
    total_line = f"‚Ä¢ –ó–≤–µ—Ä–Ω–µ–Ω—å: {data['total']}"

    # –ó–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏
    if data["by_emp"]:
        emp_lines = "\n".join([f"   ‚Äî {emp}: {cnt}" for emp, cnt in data["by_emp"].most_common()])
        emp_block = f"üë§ –ó–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏:\n{emp_lines}"
    else:
        emp_block = "üë§ –ó–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏: ‚Äî"

    # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö (–±–µ–∑ –º–∏–Ω—É—Ç, —Ç–æ–ª—å–∫–æ —Å—á—ë—Ç—á–∏–∫–∏)
    if data["by_cat"]:
        cat_lines = []
        for cat, cnt in data["by_cat"].most_common():
            label = CATEGORIES.get(cat, cat)
            cat_lines.append(f"   ‚Äî {label} ({cat}): {cnt}")
        cat_block = "üß© –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n" + "\n".join(cat_lines)
    else:
        cat_block = "üß© –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö: ‚Äî"

    # –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ (–¥–æ 5)
    if data["latest"]:
        last_lines = []
        for r in data["latest"]:
            ts = r["ts"].strftime("%Y-%m-%d %H:%M")
            label = CATEGORIES.get(r["category"], r["category"])
            comment = r["comment"]
            employee = r["employee"] or "‚Äî"
            if len(comment) > 120:
                comment = comment[:117] + "..."
            last_lines.append(f"   ‚Ä¢ {ts} ‚Äî {label} ‚Äî {employee} ‚Äî {comment}")
        latest_block = "üóíÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(last_lines)
    else:
        latest_block = "üóíÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏: ‚Äî"

    reply = "\n".join([header, total_line, emp_block, cat_block, latest_block])
    update.message.reply_text(reply)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó) ===
def handle_message(update: Update, context: CallbackContext):
    parsed = parse_message(update.message.text)
    if not parsed:
        return

    code, phone, comment = parsed
    category = CATEGORIES.get(code, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫
    employee_data = EMPLOYEES.get(update.message.from_user.id)
    if employee_data:
        employee_name = employee_data["name"]
        responsible_id = employee_data["b24_id"]
    else:
        employee_name = update.message.from_user.full_name
        responsible_id = RESPONSIBLE_ID

    # –∫–æ–Ω—Ç–∞–∫—Ç
    contact = find_contact_by_phone(phone)
    if not contact:
        update.message.reply_text("‚ùó –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É CRM")
        return

    # –∑–∞–¥–∞—á–∞ –≤ Bitrix
    create_task(contact["ID"], category, comment, responsible_id)

    # –∑–∞–ø–∏—Å—å –≤ Google Sheets
    try:
        sheet = init_gsheets()
        sheet.append_row([timestamp, employee_name, code, phone, comment, "–í–∏–∫–æ–Ω–∞–Ω–æ"])
    except Exception as e:
        update.message.reply_text(f"‚ö† –ü–æ–º–∏–ª–∫–∞ Google Sheets: {e}")
        return

    client_name = f"{contact.get('NAME', '')} {contact.get('LAST_NAME', '')}".strip()
    update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {category} ‚Äì {client_name}")

# === MAIN ===
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥–∞ /info
    dp.add_handler(CommandHandler("info", handle_info_command))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
